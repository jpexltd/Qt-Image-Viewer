/******************************************************************************
 * sliderdialog.cpp
 * Author: Christopher Jensen
 * This file contains the implementations of the functions for our slider
 * dialog, a color adjustment window.
 * Date of first commit: 11 October, 2011
 *****************************************************************************/
#include "sliderdialog.h"
#include "ui_sliderdialog.h"
#include <math.h>

// Standard constructor; auto-generated by Qt Creator.
SliderDialog::SliderDialog(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::SliderDialog)
{
    ui->setupUi(this);
}
// Standard destructor; auto-generated by Qt Creator.
SliderDialog::~SliderDialog()
{
    delete ui;
}
/******************************************************************************
 * setImage(QImage): Set the preview window's image
 * An easy way to be consistent about setting the pixmap for the preview
 * window.
 *****************************************************************************/
void SliderDialog::setImage(QImage pic)
{
    ui->PreviewLabel->setPixmap(QPixmap::fromImage(pic));
}

/******************************************************************************
 * getImage(QImage): Get the preview window's image
 * An easy way to be consistent about getting the pixmap for the preview
 * window.
 *****************************************************************************/
const QPixmap * SliderDialog::getPixmap()
{
    return ui->PreviewLabel->pixmap();
}
/* These functions were misbehaving (i.e. did not work as intended) and have been removed.
void SliderDialog::setBrightness()
{
    QImage pic = ui->PreviewLabel->pixmap()->toImage();
    for(int i = 1; i < pic.width(); ++i)
        for(int j = 1; j < pic.height(); ++j)
        {
            QRgb color = pic.pixel(i,j);
            int red = qRed(color) + ui->brightness->value() - bright_index;
            int blue = qBlue(color) + ui->brightness->value() - bright_index;
            int green = qGreen(color) + ui->brightness->value() - bright_index;
            if(red > 0xFF) red = 0xFF;
            if(blue > 0xFF) blue = 0xFF;
            if(green > 0xFF) green = 0xFF;
            if(red < 0) red = 0;
            if(blue < 0) blue = 0;
            if(green < 0) green = 0;
            color = qRgb(red, green, blue);
            pic.setPixel(i,j,color);
        }
    ui->PreviewLabel->setPixmap(QPixmap::fromImage(pic));
    ui->PreviewLabel->show();
    bright_index = ui->brightness->value();
}
void SliderDialog::setContrast()
{    QImage pic = ui->PreviewLabel->pixmap()->toImage();
    for(int i = 1; i < pic.width(); ++i)
        for(int j = 1; j < pic.height(); ++j)
        {
            QRgb color = pic.pixel(i,j);
            int red = pow(qRed(color),ui->Contrast->value() / 100.0);
            int blue = pow(qBlue(color),ui->Contrast->value() / 100.0);
            int green = pow(qGreen(color),ui->Contrast->value() / 100.0);
            if(red > 0xFF) red = 0xFF;
            if(blue > 0xFF) blue = 0xFF;
            if(green > 0xFF) green = 0xFF;
            if(red < 0) red = 0;
            if(blue < 0) blue = 0;
            if(green < 0) green = 0;
            color = qRgb(red, green, blue);
            pic.setPixel(i,j,color);
        }
    ui->PreviewLabel->setPixmap(QPixmap::fromImage(pic));
    ui->PreviewLabel->show();
    bright_index = ui->brightness->value();
}
*/
/******************************************************************************
 * setRed(): Modify the red values of the preview image.
 * This modifies the intensity of the red values, selectively.
 * If combined with green and blue, it can modify the brightness.
 * I do not know if this is a standard feature, but it was easy
 * to implement and uses a slider.
 *****************************************************************************/
void SliderDialog::setRed()
{
    QImage pic = ui->PreviewLabel->pixmap()->toImage();
    for(int i = 1; i < pic.width(); ++i)
        for(int j = 1; j < pic.height(); ++j)
        {
            QRgb color = pic.pixel(i,j);
            int red = qRed(color) + ui->Red->value();
            int blue = qBlue(color);
            int green = qGreen(color);
            if(red > 0xFF) red = 0xFF;
            if(red < 0) red = 0;
            color = qRgb(red, green, blue);
            pic.setPixel(i,j,color);
        }
    ui->PreviewLabel->setPixmap(QPixmap::fromImage(pic));
    ui->PreviewLabel->show();
}
/******************************************************************************
 * setBlue(): Modify the blue values of the preview image.
 * This modifies the intensity of the blue values, selectively.
 * If combined with green and red, it can modify the brightness.
 * I do not know if this is a standard feature, but it was easy
 * to implement and uses a slider.
 *****************************************************************************/
void SliderDialog::setBlue()
{
    QImage pic = ui->PreviewLabel->pixmap()->toImage();
    for(int i = 1; i < pic.width(); ++i)
        for(int j = 1; j < pic.height(); ++j)
        {
            QRgb color = pic.pixel(i,j);
            int red = qRed(color);
            int blue = qBlue(color) + ui->Blue->value();
            int green = qGreen(color);
            if(blue > 0xFF) blue = 0xFF;
            if(blue < 0) blue = 0;
            color = qRgb(red, green, blue);
            pic.setPixel(i,j,color);
        }
    ui->PreviewLabel->setPixmap(QPixmap::fromImage(pic));
    ui->PreviewLabel->show();
}
/******************************************************************************
 * setGreen(): Modify the green values of the preview image.
 * This modifies the intensity of the red values, selectively.
 * If combined with red and blue, it can modify the brightness.
 * I do not know if this is a standard feature, but it was easy
 * to implement and uses a slider.
 *****************************************************************************/
void SliderDialog::setGreen()
{
    QImage pic = ui->PreviewLabel->pixmap()->toImage();
    for(int i = 1; i < pic.width(); ++i)
        for(int j = 1; j < pic.height(); ++j)
        {
            QRgb color = pic.pixel(i,j);
            int red = qRed(color);
            int blue = qBlue(color);
            int green = qGreen(color) + ui->Green->value();
            if(green > 0xFF) green = 0xFF;
            if(green < 0) green = 0;
            color = qRgb(red, green, blue);
            pic.setPixel(i,j,color);
        }
    ui->PreviewLabel->setPixmap(QPixmap::fromImage(pic));
    ui->PreviewLabel->show();
}
/******************************************************************************
 * commit(): Change the target window's pixmap to match the preview window's.
 * This slot is called when the user clicks the "OK" button on the slider
 * dialog. All it really does is replace the target window's pixmap with the
 * one in the preview window, so all changes applied by a slider will be
 * reflected in the image. Not called if the user cancels out of or otherwise
 * closes the slider dialog.
 *****************************************************************************/
void SliderDialog::commit()
{
    const QPixmap *pic = ui->PreviewLabel->pixmap();
    target->setImage(pic->toImage());
    accept();
}
